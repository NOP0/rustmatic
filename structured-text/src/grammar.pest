file = { SOI ~ (program | function_block)* ~ EOI }

program = { ^"program" ~ identifier ~ preamble ~ block ~ ^"end_program" ~ ";"? }
function_block = {
    ^"function_block" ~ identifier ~ preamble ~ block ~ ^"end_function_block" ~ ";"?
}
function = {
    ^"function" ~ identifier ~ ":" ~ identifier ~ preamble ~ block ~ ^"end_function" ~ ";"?
}

preamble = { var_block* }

var_block                   = { var_block_kind ~ (variable_decl ~ ";")* ~ ^"end_var" }
variable_decl               = { identifier ~ ":" ~ identifier ~ (assign ~ expression)? }
var_block_kind = _{ 
    global_var_block | external_var_block | input_var_block | output_var_block | inout_var_block |
    normal_var_block 
}
normal_var_block            = { ^"var" }
global_var_block            = { ^"var_global" }
external_var_block          = { ^"var_external" }
input_var_block             = { ^"var_input" }
output_var_block            = { ^"var_output" }
inout_var_block             = { ^"var_in_out "}

block                       = { statement* }
statement                   = { (assignment| repeat) ~ ";" }
assignment                  = { identifier ~ assign ~ expression }

repeat                      = { ^"repeat" ~ repeat_body ~ ^"end_repeat" }
repeat_body                 = _{ block ~ ^"until" ~ assignment ~ ";" }

expression                  = _{ infix | expression_inner }
infix                       =  { expression_inner ~ (binary_operator ~ expression_inner)+ }
expression_inner            = _{ unary | literal | identifier | braced_expression }
braced_expression           = _{ "(" ~ expression ~ ")" }
unary                       =  { unary_operator ~ (literal | identifier | braced_expression) }

literal                     = _{ boolean | float | integer | string }

boolean                     =  { boolean_true | boolean_false }
boolean_true                =  { ^"true" }
boolean_false               =  { ^"false" }

fixed_point                 = { integer ~ ("." ~ integer)? }

float                       = ${ float_characteristic ~ "." ~ float_mantissa }
float_characteristic        = _{ "0" | (('1'..'9') ~ ('0'..'9' | "_")*) }
float_mantissa              = _{ ('0'..'9')+ }

duration                    = { ("TIME" | "T") ~ "#" ~ (days | hours | minutes | seconds | milliseconds) } 
days                        = { integer ~ "d" ~ ("_" ~ hours)? }
hours                       = { integer ~ "h" ~ ("_" ~ minutes)? }
minutes                     = { integer ~ "m" ~ ("_" ~ seconds)? }
seconds                     = { integer ~ "s" ~ ("_" ~ milliseconds)? }
milliseconds                = { fixed_point ~ "ms" }

time_of_day                 = { ("TIME_OF_DAY" | "TOD") ~ "#" ~ tod_payload }
tod_payload                 = { integer ~ ":" ~ integer ~ ":" ~ fixed_point }

date                        = { ("DATE" | "D") ~ "#" ~ date_payload }
date_payload                = { integer ~ "-" ~ integer ~ "-" ~ integer }

date_and_time               = { ("DATE_AND_TIME" | "DT") ~ "#" ~ date_payload ~ tod_payload }   

integer                     = ${ integer_hexadecimal_sigil | integer_binary_sigil | integer_decimal | integer_zero }
integer_decimal             =  { '1'..'9' ~ ('0'..'9' | "_")* }
integer_hexadecimal_sigil   = _{ ^"16#" ~ integer_hexadecimal }
integer_hexadecimal         =  { ('0'..'9' | 'a'..'f' | 'A'..'F') ~ ('0'..'9' | 'a'..'f' | 'A'..'F' | "_")* }
integer_binary_sigil        = _{ ^"2#" ~ integer_binary }
integer_binary              =  { ('0'..'1') ~ ('0'..'1' | "_")* }
integer_zero                =  { "0" }

string                      = ${ string_single_line }
string_single_line          = _{ string_delimiter ~ string_content ~ string_delimiter }
string_content              = ${ (string_escape | !(string_delimiter | "\\") ~ ANY)* }
string_delimiter            = _{ "\"" }
string_unicode              = _{ "u" ~ ('0'..'9' | 'a'..'f' | 'A'..'F'){4} }
string_escape               = _{ "\\" ~ ("\"" | "\\" | "a" | "b" | "f" | "n" | "r" | "t" | "v" | string_unicode) }

multiply                    =  { "*" }
divide                      =  { "/" }
modulus                     =  { "%" }
plus                        =  { "+" }
minus                       =  { "-" }
less_than                   =  { "<" }
less_than_or_equal          =  { "<=" }
greater_than                =  { ">" }
greater_than_or_equal       =  { ">=" }
not_equal                   =  { "!=" }
equal                       =  { "=" }
assign                      =  { ":=" }

binary_operator             = _{
                                 multiply | divide | modulus |
                                 plus | minus |
                                 less_than_or_equal | less_than |
                                 greater_than_or_equal | greater_than |
                                 not_equal | equal 
                               }
unary_operator              = _{ plus | minus }

keyword = {
    ^"at" | 
    ^"by" |
    ^"case" |
    ^"configuration" | 
    ^"do" |
    ^"else" | 
    ^"elsif" |
    ^"end_case" | 
    ^"end_configuration" | 
    ^"end_function" |
    ^"end_function_block" | 
    ^"end_if" | 
    ^"end_program" | 
    ^"end_repeat" |
    ^"end_while" | 
    ^"function" |
    ^"function_block" | 
    ^"if" | 
    ^"program" | 
    ^"repeat" |
    ^"resource" | 
    ^"task" | 
    ^"then" | 
    ^"until" | 
    ^"var_external" | 
    ^"var_global" | 
    ^"var_input" | 
    ^"var_output" | 
    ^"var_in_out" |
    ^"var" | 
    ^"while" | 
    ^"with" 
}

conditional = {
    if_branch ~ elsif_branch* ~ else_branch? ~ ^"end_if"
}

if_branch = {
    ^"if" ~ condition_then_block
}

elsif_branch = {
    ^"elsif" ~ condition_then_block
}

else_branch = {
    ^"else" ~ block
}

condition_then_block = _{
    expression ~ ^"then" ~ block
}

identifier = @{
    !keyword ~ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")*
}

WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT = _{ 
    ( "(*" ~ (!"*)" ~ ANY)* ~ "*)" )  | 
    ( "//" ~ (!NEWLINE ~ ANY)* )
}